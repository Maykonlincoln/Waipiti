version: '3.9'

# Following the DRY philosophy
x-default_php_setup:
  &default_php_setup
  image: php${PHP_HASH}
  networks:
    - test-network

x-healthcheck_web:
  &healthcheck_web
  healthcheck:
    test: ${DEFAULT_WEB_HEALTHCHECK_COMMAND}
    interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
    timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
    start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    retries: ${DEFAULT_HEALTHCHECKS_RETRIES}

x-default_mysql_setup:
  &default_mysql_setup
  image: mysql${MYSQL_HASH}
  networks:
    - test-network

x-healthcheck_mysql:
  &healthcheck_mysql
  healthcheck:
    test: ${DEFAULT_MYSQL_HEALTHCHECK_COMMAND}
    start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
    timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
    retries: ${DEFAULT_HEALTHCHECKS_RETRIES}

services:
  # Nginx container for the wapp module
  wapp:
    image: nginx${NGINX_HASH}
    volumes:
      - ./test_mod_wapp/websites/:/usr/share/nginx/html/
      - ./test_mod_wapp/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - test-network
    healthcheck:
      test: ${DEFAULT_WEB_HEALTHCHECK_COMMAND}other_mock/index.wiki.jsp.html
      interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
      timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
      start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
      retries: ${DEFAULT_HEALTHCHECKS_RETRIES}
  
  # Apache container for the shellshock module
  shellshock:
    build:
      context: ./test_mod_shellshock
      dockerfile: Dockerfile
      args:
        HTTPD_HASH_TAG: ${HTTPD_HASH}
    networks:
      - test-network
    <<: *healthcheck_web

  # Apache container for the sql module
  sql:
    build:
      context: ./test_mod_sql/
      dockerfile: Dockerfile
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    volumes:
      - ./test_mod_sql/php/src/:/var/www/html/
    networks:
      - test-network


  timesql-db:
    build:
      context: ./test_mod_timesql/
      dockerfile: Dockerfile.mysql
      args:
        - MYSQL_HASH_TAG=${MYSQL_HASH}
    environment:
      MYSQL_DATABASE: ${TIMESQL_MYSQL_DATABASE}
      MYSQL_USER: ${TIMESQL_MYSQL_USER}
      MYSQL_PASSWORD: ${TIMESQL_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${TIMESQL_MYSQL_ROOT_PASSWORD}
    <<: *healthcheck_mysql
    volumes:
      - timesql_db_data:/var/lib/mysql
    networks:
      - test-network
  # Apache container for the timesql module
  timesql:
    build:
      context: ./test_mod_timesql/
      dockerfile: Dockerfile.php
      args:
        - PHP_HASH_TAG=${PHP_HASH}
    environment:
      MYSQL_HOST: timesql-db
      MYSQL_DATABASE: ${TIMESQL_MYSQL_DATABASE}
      MYSQL_USER: ${TIMESQL_MYSQL_USER}
      MYSQL_PASSWORD: ${TIMESQL_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${TIMESQL_MYSQL_ROOT_PASSWORD}
    <<: *healthcheck_web
    depends_on:
      timesql-db:
        condition: service_healthy
    volumes:
      - ./test_mod_timesql/php/src/:/var/www/html/
    networks:
      - test-network
      
  # Apache and Nginx container for the methods module
  # Apache hardly handle the CONNECT method so we need Nginx
  # as a proxy to filter methods and avoid complex Apache conf
  methods:
    image: nginx${NGINX_HASH}
    volumes:
      - ./test_mod_methods/nginx.template:/etc/nginx/templates/default.conf.template
    networks:
      - test-network
    <<: *healthcheck_web
    depends_on:
      apache-methods:
        condition: service_healthy

  apache-methods:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_methods/php/src:/var/www/html/

  # First, all the different databases required to run the containers
  drupal9-db:
    <<: [ *default_mysql_setup, *healthcheck_mysql ]
    environment:
      MYSQL_DATABASE: ${DRUPAL_MYSQL_DB}
      MYSQL_USER: ${DRUPAL_MYSQL_USER}
      MYSQL_PASSWORD: ${DRUPAL_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DRUPAL_MYSQL_ROOT_PASSWORD}
    volumes:
      - drupal9_db_data:/var/lib/mysql

  # Apache container for the log4shell module
  log4shell:
    build:
      context: ./test_mod_log4shell/tomcat/
      dockerfile: Dockerfile.tomcat
      args:
        TOMCAT_HASH_TAG: ${TOMCAT_TAG}
    healthcheck:
      test: "nc -z localhost 80"
      interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
      timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
      retries: ${DEFAULT_HEALTHCHECKS_RETRIES}
      start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    networks:
      - test-network

  unifi:
    image: jacobalberty/unifi:v6.5.53
    volumes:
      - ./test_mod_log4shell/unifi.system.properties:/unifi/data/system.properties
    healthcheck:
      test: [ "CMD", "/usr/local/bin/docker-healthcheck.sh" ]
      interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
      timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
      retries: ${DEFAULT_HEALTHCHECKS_RETRIES}
      start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    networks:
      - test-network

  dns-endpoint:
    build:
      context: ./dns-endpoint
      dockerfile: Dockerfile.dns-endpoint
    healthcheck:
      test: [ "CMD", "ruby", "/usr/local/bin/healthcheck.rb" ]
      interval: ${DEFAULT_HEALTHCHECKS_INTERVAL}
      timeout: ${DEFAULT_HEALTHCHECKS_TIMEOUT}
      retries: ${DEFAULT_HEALTHCHECKS_RETRIES}
      start_period: ${DEFAULT_HEALTHCHECKS_START_PERIOD}
    networks:
      - test-network

  drupal10-db:
    <<: [ *default_mysql_setup, *healthcheck_mysql ]
    environment:
      MYSQL_DATABASE: ${DRUPAL_MYSQL_DB}
      MYSQL_USER: ${DRUPAL_MYSQL_USER}
      MYSQL_PASSWORD: ${DRUPAL_MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DRUPAL_MYSQL_ROOT_PASSWORD}
    volumes:
      - drupal10_db_data:/var/lib/mysql

  # Drupal containers and their databases for the drupal_enum module
  drupal9:
    image: drupal${DRUPAL9_HASH}
    <<: *healthcheck_web
    networks:
      - test-network
    environment:
      MYSQL_HOST: drupal9-db
      MYSQL_DATABASE: ${DRUPAL_MYSQL_DB}
      MYSQL_USER: ${DRUPAL_MYSQL_USER}
      MYSQL_PASSWORD: ${DRUPAL_MYSQL_PASSWORD}
    depends_on:
      drupal9-db:
        condition: service_healthy

  drupal10:
    image: drupal${DRUPAL10_HASH}
    <<: *healthcheck_web
    networks:
      - test-network
    environment:
      MYSQL_HOST: drupal10-db
      MYSQL_DATABASE: ${DRUPAL_MYSQL_DB}
      MYSQL_USER: ${DRUPAL_MYSQL_USER}
      MYSQL_PASSWORD: ${DRUPAL_MYSQL_PASSWORD}
    depends_on:
      drupal10-db:
        condition: service_healthy

  buster:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_buster/php/src:/var/www/html
  # Apache container for the ssrf module
  ssrf:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_ssrf/php/src:/var/www/html/
    depends_on:
      endpoint:
        condition: service_healthy

  # Apache container for the xxe module and its endpoint
  xxe:
    <<: [ *default_php_setup, *healthcheck_web ]
    depends_on:
      endpoint:
        condition: service_healthy
    volumes:
      - ./test_mod_xxe/php/src/:/var/www/html/

  # Custom endpoint for requests
  endpoint:
    build:
      context: ../../
      dockerfile: "tests/integration/endpoint/Dockerfile"
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    networks:
      - test-network

  # Apache container to test the auths methods for the crawler
  crawler_auth:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_crawler_auth/php/src:/var/www/html/

  # Apache container for the redirect module
  redirect:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_mod_redirect/php/src:/var/www/html/

  crawler_redirect:
    <<: [ *default_php_setup, *healthcheck_web ]
    volumes:
      - ./test_crawler_redirect/php/src:/var/www/html/

  # Apache container for the permanentxss module
  permanentxss:
    build:
      context: ./test_mod_permanentxss/
      dockerfile: Dockerfile
      args:
        PHP_HASH_TAG: ${PHP_HASH}
    <<: *healthcheck_web
    volumes:
      - ./test_mod_permanentxss/php/src/index.php:/var/www/html/index.php
      - ./test_mod_permanentxss/php/src/form.php:/var/www/html/form.php
    networks:
      - test-network

  # Wapiti container 
  # requires all the targets containers to work perfectly
  wapiti:
    build:
      context: "../../"
      dockerfile: "./tests/integration/wapiti/Dockerfile.integration"
      no_cache: true
    container_name: wapiti
    volumes:
      - ./.test:/home/
    networks:
      - test-network
    command: "${TESTS}"
    depends_on:
      wapp:
        condition: service_healthy
      drupal9:
        condition: service_healthy
      drupal10:
        condition: service_healthy
      buster:
        condition: service_healthy
      ssrf:
        condition: service_healthy
      log4shell:
        condition: service_healthy
      unifi:
        condition: service_healthy
      dns-endpoint:
        condition: service_healthy
      redirect:
        condition: service_healthy
      crawler_redirect:
        condition: service_healthy
      crawler_auth:
        condition: service_healthy
      permanentxss:
        condition: service_healthy
      timesql:
        condition: service_healthy
      methods:
        condition: service_healthy
      shellshock:
        condition: service_healthy
      xxe:
        condition: service_healthy
      sql:
        condition: service_healthy

volumes:
  drupal9_db_data:
  drupal10_db_data:
  timesql_db_data:
networks:
  test-network:
